{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\n\nconst LoneGoblinOptions = (setCharAlive, passedRoom, setPassedRoom) => {\n  _s();\n\n  const [searched, setSearched] = useState(false);\n\n  const traverseRoom = () => {\n    if (searched) {} else {}\n  };\n\n  const searchRoom = () => {\n    fetch(\"/api/searches/3\").then(resp => resp.json()).then(search => setGoblinEncounterLog([...goblinEncounterLog, search.search_desc])).then(() => setSearched(true));\n  };\n\n  const sneakRoom = () => {};\n};\n\n_s(LoneGoblinOptions, \"IP+Wl8dnkz1iCT2InrO+78W6ntI=\");\n\n_c = LoneGoblinOptions;\nexport default LoneGoblinOptions;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoneGoblinOptions\");","map":{"version":3,"sources":["/home/soustop/Dev/projects/into-the-trungeon/client_frontend/src/Options/LoneGoblinOptions.js"],"names":["React","useEffect","useState","LoneGoblinOptions","setCharAlive","passedRoom","setPassedRoom","searched","setSearched","traverseRoom","searchRoom","fetch","then","resp","json","search","setGoblinEncounterLog","goblinEncounterLog","search_desc","sneakRoom"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAG,CACxBC,YADwB,EAGxBC,UAHwB,EAIxBC,aAJwB,KAKrB;AAAA;;AACH,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMO,YAAY,GAAG,MAAM;AACzB,QAAIF,QAAJ,EAAc,CACb,CADD,MACO,CACN;AACF,GAJD;;AAMA,QAAMG,UAAU,GAAG,MAAM;AACvBC,IAAAA,KAAK,CAAC,iBAAD,CAAL,CACGC,IADH,CACSC,IAAD,IAAUA,IAAI,CAACC,IAAL,EADlB,EAEGF,IAFH,CAESG,MAAD,IACJC,qBAAqB,CAAC,CAAC,GAAGC,kBAAJ,EAAwBF,MAAM,CAACG,WAA/B,CAAD,CAHzB,EAKGN,IALH,CAKQ,MAAMJ,WAAW,CAAC,IAAD,CALzB;AAMD,GAPD;;AASA,QAAMW,SAAS,GAAG,MAAM,CAAE,CAA1B;AACD,CAxBD;;GAAMhB,iB;;KAAAA,iB;AA0BN,eAAeA,iBAAf","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\n\nconst LoneGoblinOptions = (\n  setCharAlive,\n  \n  passedRoom,\n  setPassedRoom\n) => {\n  const [searched, setSearched] = useState(false);\n\n  const traverseRoom = () => {\n    if (searched) {\n    } else {\n    }\n  };\n\n  const searchRoom = () => {\n    fetch(\"/api/searches/3\")\n      .then((resp) => resp.json())\n      .then((search) =>\n        setGoblinEncounterLog([...goblinEncounterLog, search.search_desc])\n      )\n      .then(() => setSearched(true));\n  };\n\n  const sneakRoom = () => {};\n};\n\nexport default LoneGoblinOptions\n"]},"metadata":{},"sourceType":"module"}